<section id="embedded-why-rust" class="green">
  <div class="w-100 mw-none ph3 mw8-m mw9-l center f3">
    <header>
      <h2>Why Rust?</h2>
      <div class="highlight"></div>
    </header>
    <div class="row">
      <div class="four columns" id="powerful-static-analysis">
        <div class="domain-icon">
          <img src="/static/images/microscope.svg" alt="A microscope"/>
          <h3>Powerful static analysis</h3>
        </div>
        <p>
          Enforce pin and peripheral configuration at compile time. Guarantee that resources won’t be used by
          unintended parts of your application.
        </p>
        <a href="https://docs.rust-embedded.org/book/static-guarantees/" target="_blank" rel="noopener" class="button button-secondary">Learn more</a>
      </div>
      <div class="four columns" id="flexible-memory-management">
        <div class="domain-icon">
          <img src="/static/images/ram-memory.svg" alt="A RAM stick"/>
          <h3>Flexible memory management</h3>
        </div>
        <p>
          Dynamic memory allocation is optional. Use a global allocator and dynamic data structures.
          Or leave out the heap altogether and statically allocate everything.
        </p>
          <a href="https://docs.rust-embedded.org/book/collections/" target="_blank" rel="noopener" class="button button-secondary">Learn more</a>
      </div>
      <div class="four columns" id="safe-concurrency">
        <div class="domain-icon">
          <img src="/static/images/gears.svg" alt="Gears"/>
          <h3>Fearless concurrency</h3>
        </div>
        <p>
          Rust makes it impossible to accidentally share state between threads.
          Use any concurrency approach you like, and you’ll still get Rust’s strong guarantees.
        </p>
        <a href="https://docs.rust-embedded.org/book/concurrency/" target="_blank" rel="noopener" class="button button-secondary">Learn more</a>
      </div>
    </div>
    <div class="row">
      <div class="four columns" id="Interoperability">
        <div class="domain-icon">
          <img src="/static/images/handshake.svg" alt="Handshake" />
          <h3>Interoperability</h3>
        </div>
        <p>
          Integrate Rust into your existing C codebase or leverage an existing SDK to write a Rust
          application.
        </p>
        <a href="https://docs.rust-embedded.org/book/interoperability/" target="_blank" rel="noopener" class="button button-secondary">Learn more</a>
      </div>
      <div class="four columns" id="portability">
        <div class="domain-icon">
          <img src="/static/images/luggage.svg" alt="Luggage trolley" />
          <h3>Portability</h3>
        </div>
        <p>
          Write a library or driver once, and use it with a variety of systems, ranging
          from very small microcontrollers to powerful SBCs.
        </p>
          <a href="https://docs.rust-embedded.org/book/portability/" target="_blank" rel="noopener" class="button button-secondary">Learn more</a>
      </div>
      <div class="four columns">
        <div class="domain-icon">
          <img src="/static/images/cli-rustc-approved.svg" alt="Shield Logo" />
          <h3>Community driven</h3>
        </div>
        <p>
          As part of the Rust open source project, support for embedded systems is driven by a best-in-class open source community, with support from commercial partners.
        </p>
        <a href="https://github.com/rust-embedded/wg" target="_blank" rel="noopener" class="button button-secondary">Learn more</a>
      </div>
    </div>
  </div>
</section>
